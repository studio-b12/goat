// You can use this file to get ready fast using goat.
// You can also import other goatfiles using "use <relative location>".
//
// This example contains parameter placeholders (for example "{{.instance}}").
// You can pass variables into goat either via environment variables prefixed
// with "Goat_" (for example "Goat_INSTANCE=https://example.com") or via a
// parameter file (can be either a YAML, JSON or TOML file).
// Tip: You can also use a .env file for testing!
//
// Here you can find the Goatfile reference and more about how Goat works:
// https://studio-b12.github.io/goat/goatfile/index.html
//
// If you encounter any issues, want to submit an improvement or
// feature request or just want to ask a question, feel free to
// open a issue on GitHub.
// https://github.com/studio-b12/goat/issues/new



////////////////////////////////////////////////
// Here you can define default values for 
// Header, Options, QueryParams, Body and 
// Script which will be applied to each
// request.

### Defaults

// Header, Option and QueryParam defaults will 
// be appended to the other specified values 
// in the request.
[Header]
Content-Type: application/json

// Script and Body values will be set when no
// other value is specified for the request.
// Otherwise, the request's value will be used.
[Script]
assert(response.StatusCode == 200, `Status code was ${response.StatusCode}`);

---

////////////////////////////////////////////////
// Setup steps which will run at the 
// start of the tests batch.

### Setup

POST {{.instance}}/api/v1/auth/login

[Header]
Content-Type: application/json

[Body]
{
    "username": "{{.credentials.username}}",
    "password": "{{.credentials.password}}"
}

[Script]
assert(response.StatusCode == 200, `Status code was ${response.StatusCode}`);

---


////////////////////////////////////////////////
// Teardown steps which will run at the 
// end of the tests batch.

### Teardown

POST {{.instance}}/api/v1/auth/logout

[Script]
assert(response.StatusCode == 200, `Status code was ${response.StatusCode}`);

---


////////////////////////////////////////////////
// Test steps to test your API.

### Tests

// This is an extra log section which will help
// to visually separate tests from another in the
// output logs.
##### Test Endpoint Tests

GET {{.instance}}/api/v1/test

[Script]
assert(response.StatusCode == 200, `Status code was ${response.StatusCode}`);